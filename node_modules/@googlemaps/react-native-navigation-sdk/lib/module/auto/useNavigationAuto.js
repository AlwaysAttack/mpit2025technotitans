"use strict";

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { NativeModules } from 'react-native';
import { useModuleListeners } from '../shared';
import { useMemo } from 'react';
const {
  NavAutoModule
} = NativeModules;
export const useNavigationAuto = () => {
  const moduleListenersHandler = useModuleListeners('NavAutoEventDispatcher', ['onAutoScreenAvailabilityChanged', 'onCustomNavigationAutoEvent']);
  const mapViewAutoController = useMemo(() => ({
    cleanup: async () => {
      moduleListenersHandler.removeAllListeners();
    },
    isAutoScreenAvailable: async () => {
      return await NavAutoModule.isAutoScreenAvailable();
    },
    setMapType: mapType => {
      NavAutoModule.setMapType(mapType);
    },
    setMapStyle: mapStyle => {
      NavAutoModule.setMapStyle(mapStyle);
    },
    // Android only.
    setMapToolbarEnabled: enabled => {
      NavAutoModule.setMapToolbarEnabled(enabled);
    },
    clearMapView: () => {
      NavAutoModule.clearMapView();
    },
    addCircle: async circleOptions => {
      return await NavAutoModule.addCircle(circleOptions);
    },
    addMarker: async markerOptions => {
      return await NavAutoModule.addMarker(markerOptions);
    },
    addPolyline: async polylineOptions => {
      return await NavAutoModule.addPolyline({
        ...polylineOptions,
        points: polylineOptions.points || []
      });
    },
    addPolygon: async polygonOptions => {
      return await NavAutoModule.addPolygon({
        ...polygonOptions,
        holes: polygonOptions.holes || [],
        points: polygonOptions.points || []
      });
    },
    removeMarker: id => {
      return NavAutoModule.removeMarker(id);
    },
    removePolyline: id => {
      return NavAutoModule.removePolyline(id);
    },
    removePolygon: id => {
      return NavAutoModule.removePolygon(id);
    },
    removeCircle: id => {
      return NavAutoModule.removeCircle(id);
    },
    setIndoorEnabled: isOn => {
      return NavAutoModule.setIndoorEnabled(isOn);
    },
    setTrafficEnabled: isOn => {
      return NavAutoModule.setTrafficEnabled(isOn);
    },
    setCompassEnabled: isOn => {
      return NavAutoModule.setCompassEnabled(isOn);
    },
    setMyLocationButtonEnabled: isOn => {
      return NavAutoModule.setMyLocationButtonEnabled(isOn);
    },
    setMyLocationEnabled: isOn => {
      return NavAutoModule.setMyLocationEnabled(isOn);
    },
    setRotateGesturesEnabled: isOn => {
      return NavAutoModule.setRotateGesturesEnabled(isOn);
    },
    setScrollGesturesEnabled: isOn => {
      return NavAutoModule.setScrollGesturesEnabled(isOn);
    },
    setScrollGesturesEnabledDuringRotateOrZoom: isOn => {
      return NavAutoModule.setScrollGesturesEnabledDuringRotateOrZoom(isOn);
    },
    // Android only.
    setZoomControlsEnabled: isOn => {
      return NavAutoModule.setZoomControlsEnabled(isOn);
    },
    setZoomLevel: async level => {
      return NavAutoModule.setZoomLevel(level);
    },
    setTiltGesturesEnabled: isOn => {
      return NavAutoModule.setTiltGesturesEnabled(isOn);
    },
    setZoomGesturesEnabled: isOn => {
      return NavAutoModule.setZoomGesturesEnabled(isOn);
    },
    setBuildingsEnabled: isOn => {
      return NavAutoModule.setBuildingsEnabled(isOn);
    },
    getCameraPosition: async () => {
      return await NavAutoModule.getCameraPosition();
    },
    getMyLocation: async () => {
      return await NavAutoModule.getMyLocation();
    },
    getUiSettings: async () => {
      return await NavAutoModule.getUiSettings();
    },
    isMyLocationEnabled: async () => {
      return await NavAutoModule.isMyLocationEnabled();
    },
    moveCamera: cameraPosition => {
      return NavAutoModule.moveCamera(cameraPosition);
    },
    setPadding: padding => {
      const {
        top = 0,
        left = 0,
        bottom = 0,
        right = 0
      } = padding;
      return NavAutoModule.setPadding(top, left, bottom, right);
    }
  }), [moduleListenersHandler]);
  return {
    mapViewAutoController,
    ...moduleListenersHandler
  };
};
//# sourceMappingURL=useNavigationAuto.js.map