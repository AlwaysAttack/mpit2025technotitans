"use strict";

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import React, { useCallback, useEffect, useRef, useState } from 'react';
import { Platform, StyleSheet, View, findNodeHandle } from 'react-native';
import { NavViewManager } from '../../shared';
import { getNavigationViewController } from './navigationViewController';
import { getMapViewController, FragmentType } from '../../maps';
import { jsx as _jsx } from "react/jsx-runtime";
export const NavigationView = props => {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const mapViewRef = useRef(null);
  const [viewId, setViewId] = useState(null);
  const {
    onMapViewControllerCreated,
    androidStylingOptions,
    iOSStylingOptions,
    onNavigationViewControllerCreated
  } = props;

  /**
   * @param ref - The reference to the NavViewManager component.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const onRefAssign = ref => {
    if (mapViewRef.current !== ref) {
      mapViewRef.current = ref;
    }
  };
  useEffect(() => {
    if (!mapViewRef.current) {
      return;
    }
    const _viewId = findNodeHandle(mapViewRef.current) || 0;
    if (viewId !== _viewId) {
      setViewId(_viewId);
      onNavigationViewControllerCreated(getNavigationViewController(_viewId));
      onMapViewControllerCreated(getMapViewController(_viewId));
    }
  }, [androidStylingOptions, iOSStylingOptions, onMapViewControllerCreated, onNavigationViewControllerCreated, viewId]);
  const onMapClick = useCallback(({
    nativeEvent: latlng
  }) => {
    props.mapViewCallbacks?.onMapClick?.(latlng);
  }, [props.mapViewCallbacks]);
  const onMapReady = useCallback(() => {
    props.mapViewCallbacks?.onMapReady?.();
  }, [props.mapViewCallbacks]);
  const onMarkerClick = useCallback(({
    nativeEvent: marker
  }) => {
    props.mapViewCallbacks?.onMarkerClick?.(marker);
  }, [props.mapViewCallbacks]);
  const onPolylineClick = useCallback(({
    nativeEvent: polyline
  }) => {
    props.mapViewCallbacks?.onPolylineClick?.(polyline);
  }, [props.mapViewCallbacks]);
  const onPolygonClick = useCallback(({
    nativeEvent: polygon
  }) => {
    props.mapViewCallbacks?.onPolygonClick?.(polygon);
  }, [props.mapViewCallbacks]);
  const onCircleClick = useCallback(({
    nativeEvent: circle
  }) => {
    props.mapViewCallbacks?.onCircleClick?.(circle);
  }, [props.mapViewCallbacks]);
  const onGroundOverlayClick = useCallback(({
    nativeEvent: groundOverlay
  }) => {
    props.mapViewCallbacks?.onGroundOverlayClick?.(groundOverlay);
  }, [props.mapViewCallbacks]);
  const onMarkerInfoWindowTapped = useCallback(({
    nativeEvent: marker
  }) => {
    props.mapViewCallbacks?.onMarkerInfoWindowTapped?.(marker);
  }, [props.mapViewCallbacks]);
  const onRecenterButtonClick = useCallback(() => {
    props.navigationViewCallbacks?.onRecenterButtonClick?.();
  }, [props.navigationViewCallbacks]);
  const onPromptVisibilityChanged = useCallback(({
    nativeEvent: event
  }) => {
    props.navigationViewCallbacks?.onPromptVisibilityChanged?.(event.visible);
  }, [props.navigationViewCallbacks]);
  return /*#__PURE__*/_jsx(View, {
    style: props.style ?? styles.defaultStyle,
    children: /*#__PURE__*/_jsx(NavViewManager, {
      ref: onRefAssign,
      flex: 1,
      fragmentType: FragmentType.NAVIGATION,
      stylingOptions: (Platform.OS === 'android' ? androidStylingOptions : iOSStylingOptions) || {},
      onMapClick: onMapClick,
      onMapReady: onMapReady,
      onMarkerClick: onMarkerClick,
      onPolylineClick: onPolylineClick,
      onPolygonClick: onPolygonClick,
      onCircleClick: onCircleClick,
      onGroundOverlayClick: onGroundOverlayClick,
      onMarkerInfoWindowTapped: onMarkerInfoWindowTapped,
      onRecenterButtonClick: onRecenterButtonClick,
      onPromptVisibilityChanged: onPromptVisibilityChanged
    })
  });
};
const styles = StyleSheet.create({
  defaultStyle: {
    flex: 1
  }
});
export default NavigationView;
//# sourceMappingURL=navigationView.js.map