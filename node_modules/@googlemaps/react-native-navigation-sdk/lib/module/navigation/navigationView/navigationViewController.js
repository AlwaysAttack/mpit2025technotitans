"use strict";

/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { commands, sendCommand } from '../../shared/viewManager';
export const getNavigationViewController = viewId => {
  return {
    setNavigationUIEnabled: isOn => {
      sendCommand(viewId, commands.setNavigationUIEnabled, [isOn]);
    },
    setTripProgressBarEnabled: isOn => {
      sendCommand(viewId, commands.setTripProgressBarEnabled, [isOn]);
    },
    setReportIncidentButtonEnabled: isOn => {
      sendCommand(viewId, commands.setReportIncidentButtonEnabled, [isOn]);
    },
    setSpeedometerEnabled: isOn => {
      sendCommand(viewId, commands.setSpeedometerEnabled, [isOn]);
    },
    setSpeedLimitIconEnabled: isOn => {
      sendCommand(viewId, commands.setSpeedLimitIconEnabled, [isOn]);
    },
    setTrafficIncidentCardsEnabled: isOn => {
      sendCommand(viewId, commands.setTrafficIncidentCardsEnabled, [isOn]);
    },
    setHeaderEnabled: isOn => {
      sendCommand(viewId, commands.setHeaderEnabled, [isOn]);
    },
    setFooterEnabled: isOn => {
      sendCommand(viewId, commands.setFooterEnabled, [isOn]);
    },
    showRouteOverview: () => {
      sendCommand(viewId, commands.showRouteOverview, []);
    },
    setNightMode: index => {
      sendCommand(viewId, commands.setNightMode, [index]);
    },
    setRecenterButtonEnabled(isEnabled) {
      sendCommand(viewId, commands.setRecenterButtonEnabled, [isEnabled]);
    },
    setFollowingPerspective: perspective => {
      sendCommand(viewId, commands.setFollowingPerspective, [perspective]);
    }
  };
};
//# sourceMappingURL=navigationViewController.js.map