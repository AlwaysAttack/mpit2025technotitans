"use strict";

/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Defines the options used by the Navigator for calculating a route to a destination.
 */

/**
 * Defines the options used by the Navigator for dislaying different elements.
 */

/**
 * Defines triggering thresholds for different severity levels of speed alerts, represented by
 * SpeedAlertSeverity.
 *
 * You can use this class to customize the speed alert triggering thresholds as a percentage for
 * both MINOR and MAJOR alerts, and to customize the time-based triggering threshold for MAJOR speed alert.
 *
 * The speed alerts that are triggered by thresholds from this SpeedAlertOptions have their UI
 * customized in SpeedometerUiOptions.
 */

/**
 * Defines options that can be used to customize the "Terms and conditions"
 * dialog for the Navigation sdk.
 */

/**
 * An event fired upon arrival at a destination.
 */

/** Options to be used inside the Simulator. */

/** Defines all callbacks to be emitted during navigation. */

/**
 * An interface to send simulated locations to the Nav API, or run the Nav API along simulated
 * routes. For use during testing, debugging and demos.
 */

/**
 * Allows you to access Navigator methods.
 */

/**
 * Defines how application should behave when a application task is removed.
 */
export let TaskRemovedBehavior = /*#__PURE__*/function (TaskRemovedBehavior) {
  /** The default state, indicating that navigation guidance, location updates, and notification should persist after user removes the application task. */
  TaskRemovedBehavior[TaskRemovedBehavior["CONTINUE_SERVICE"] = 0] = "CONTINUE_SERVICE";
  /** Indicates that navigation guidance, location updates, and notification should shut down immediately when the user removes the application task. */
  TaskRemovedBehavior[TaskRemovedBehavior["QUIT_SERVICE"] = 1] = "QUIT_SERVICE";
  return TaskRemovedBehavior;
}({});

/**
 * Defines the turn-by-turn event data.
 */
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
//# sourceMappingURL=types.js.map