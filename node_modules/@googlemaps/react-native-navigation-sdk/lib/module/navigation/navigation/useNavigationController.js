"use strict";

/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { NativeModules, Platform } from 'react-native';
import { useMemo } from 'react';
import { useModuleListeners } from '../../shared';
import { TaskRemovedBehavior } from './types';
import { getRouteStatusFromStringValue } from '../navigationView';
const {
  NavModule
} = NativeModules;
export const useNavigationController = (termsAndConditionsDialogOptions, taskRemovedBehavior = TaskRemovedBehavior.CONTINUE_SERVICE) => {
  const eventTransformer = (eventKey, ...args) => {
    if (eventKey === 'onRouteStatusResult' && typeof args[0] === 'string') {
      return [getRouteStatusFromStringValue(args[0])];
    }
    return args;
  };
  const moduleListenersHandler = useModuleListeners('NavEventDispatcher', ['onStartGuidance', 'onArrival', 'onLocationChanged', 'onNavigationReady', 'onRouteStatusResult', 'onRawLocationChanged', 'onRouteChanged', 'onReroutingRequestedByOffRoute', 'onTrafficUpdated', 'onRemainingTimeOrDistanceChanged', 'onNavigationInitError', 'onTurnByTurn', 'logDebugInfo'], eventTransformer);
  const navigationController = useMemo(() => ({
    init: async () => {
      return await NavModule.initializeNavigator(termsAndConditionsDialogOptions, taskRemovedBehavior);
    },
    cleanup: async () => {
      moduleListenersHandler.removeAllListeners();
      await NavModule.cleanup();
    },
    setDestination: async (waypoint, routingOptions, displayOptions) => {
      return await NavModule.setDestination(waypoint, routingOptions, displayOptions);
    },
    setDestinations: async (waypoints, routingOptions, displayOptions) => {
      return await NavModule.setDestinations(waypoints, routingOptions, displayOptions);
    },
    continueToNextDestination: async () => {
      return await NavModule.continueToNextDestination();
    },
    clearDestinations: async () => {
      return await NavModule.clearDestinations();
    },
    startGuidance: async () => {
      return await NavModule.startGuidance();
    },
    stopGuidance: async () => {
      return await NavModule.stopGuidance();
    },
    setSpeedAlertOptions: async alertOptions => {
      return await NavModule.setSpeedAlertOptions(alertOptions);
    },
    setAbnormalTerminatingReportingEnabled: enabled => {
      return NavModule.setAbnormalTerminatingReportingEnabled(enabled);
    },
    setAudioGuidanceType: index => {
      NavModule.setAudioGuidanceType(index);
    },
    setBackgroundLocationUpdatesEnabled: isEnabled => {
      if (Platform.OS === 'ios') {
        NavModule.setBackgroundLocationUpdatesEnabled(isEnabled);
      }
    },
    setTurnByTurnLoggingEnabled: isEnabled => {
      NavModule.setTurnByTurnLoggingEnabled(isEnabled);
    },
    areTermsAccepted: async () => {
      return await NavModule.areTermsAccepted();
    },
    getCurrentRouteSegment: async () => {
      return await NavModule.getCurrentRouteSegment();
    },
    getRouteSegments: async () => {
      return await NavModule.getRouteSegments();
    },
    getCurrentTimeAndDistance: async () => {
      return await NavModule.getCurrentTimeAndDistance();
    },
    getTraveledPath: async () => {
      return await NavModule.getTraveledPath();
    },
    getNavSDKVersion: async () => {
      return await NavModule.getNavSDKVersion();
    },
    stopUpdatingLocation: () => {
      NavModule.stopUpdatingLocation();
    },
    startUpdatingLocation: () => {
      NavModule.startUpdatingLocation();
    },
    simulator: {
      simulateLocation: location => {
        NavModule.simulateLocation(location);
      },
      resumeLocationSimulation: () => {
        NavModule.resumeLocationSimulation();
      },
      pauseLocationSimulation: () => {
        NavModule.pauseLocationSimulation();
      },
      simulateLocationsAlongExistingRoute: ({
        speedMultiplier
      }) => {
        NavModule.simulateLocationsAlongExistingRoute(speedMultiplier);
      },
      stopLocationSimulation: () => {
        NavModule.stopLocationSimulation();
      }
    }
  }), [moduleListenersHandler, taskRemovedBehavior, termsAndConditionsDialogOptions]);
  return {
    navigationController,
    ...moduleListenersHandler
  };
};
//# sourceMappingURL=useNavigationController.js.map