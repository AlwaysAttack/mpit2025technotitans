"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.viewManagerName = exports.sendCommand = exports.commands = exports.NavViewManager = void 0;
var _reactNative = require("react-native");
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// NavViewManager is responsible for managing both the regular map fragment as well as the navigation map view fragment.
const viewManagerName = exports.viewManagerName = _reactNative.Platform.OS === 'android' ? 'NavViewManager' : 'RCTNavView';
const sendCommand = (viewId, command, args) => {
  if (command === undefined) {
    throw new Error("Command not found, please make sure you're using the referencing the right method");
  }
  try {
    _reactNative.UIManager.dispatchViewManagerCommand(viewId,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _reactNative.Platform.OS === 'android' ? command.toString() : command, args);
  } catch (exception) {
    console.error(exception);
  }
};
exports.sendCommand = sendCommand;
const commands = exports.commands = _reactNative.UIManager.getViewManagerConfig(viewManagerName).Commands;
const NavViewManager = exports.NavViewManager = (0, _reactNative.requireNativeComponent)(viewManagerName);
//# sourceMappingURL=viewManager.js.map