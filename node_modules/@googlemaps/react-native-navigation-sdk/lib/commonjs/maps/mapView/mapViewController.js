"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMapViewController = void 0;
var _reactNative = require("react-native");
var _viewManager = require("../../shared/viewManager");
/**
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const {
  NavViewModule
} = _reactNative.NativeModules;
const getMapViewController = viewId => {
  return {
    setMapType: mapType => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setMapType, [mapType]);
    },
    setMapStyle: mapStyle => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setMapStyle, [mapStyle]);
    },
    setMapToolbarEnabled: index => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setMapToolbarEnabled, [index]);
    },
    clearMapView: () => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.clearMapView, []);
    },
    addCircle: async circleOptions => {
      return await NavViewModule.addCircle(viewId, circleOptions);
    },
    addMarker: async markerOptions => {
      return await NavViewModule.addMarker(viewId, markerOptions);
    },
    addPolyline: async polylineOptions => {
      return await NavViewModule.addPolyline(viewId, {
        ...polylineOptions,
        points: polylineOptions.points || []
      });
    },
    addPolygon: async polygonOptions => {
      return await NavViewModule.addPolygon(viewId, {
        ...polygonOptions,
        holes: polygonOptions.holes || [],
        points: polygonOptions.points || []
      });
    },
    removeMarker: id => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.removeMarker, [id]);
    },
    removePolyline: id => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.removePolyline, [id]);
    },
    removePolygon: id => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.removePolygon, [id]);
    },
    removeCircle: id => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.removeCircle, [id]);
    },
    setIndoorEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setIndoorEnabled, [isOn]);
    },
    setTrafficEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setTrafficEnabled, [isOn]);
    },
    setCompassEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setCompassEnabled, [isOn]);
    },
    setMyLocationButtonEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setMyLocationButtonEnabled, [isOn]);
    },
    setMyLocationEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setMyLocationEnabled, [isOn]);
    },
    setRotateGesturesEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setRotateGesturesEnabled, [isOn]);
    },
    setScrollGesturesEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setScrollGesturesEnabled, [isOn]);
    },
    setScrollGesturesEnabledDuringRotateOrZoom: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setScrollGesturesEnabledDuringRotateOrZoom, [isOn]);
    },
    setZoomControlsEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setZoomControlsEnabled, [isOn]);
    },
    setZoomLevel: level => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setZoomLevel, [level]);
    },
    setTiltGesturesEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setTiltGesturesEnabled, [isOn]);
    },
    setZoomGesturesEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setZoomGesturesEnabled, [isOn]);
    },
    setBuildingsEnabled: isOn => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setBuildingsEnabled, [isOn]);
    },
    getCameraPosition: async () => {
      return await NavViewModule.getCameraPosition(viewId);
    },
    getMyLocation: async () => {
      return await NavViewModule.getMyLocation(viewId);
    },
    getUiSettings: async () => {
      return await NavViewModule.getUiSettings(viewId);
    },
    isMyLocationEnabled: async () => {
      return await NavViewModule.isMyLocationEnabled(viewId);
    },
    moveCamera: cameraPosition => {
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.moveCamera, [cameraPosition]);
    },
    setPadding: padding => {
      const {
        top = 0,
        left = 0,
        bottom = 0,
        right = 0
      } = padding;
      (0, _viewManager.sendCommand)(viewId, _viewManager.commands.setPadding, [top, left, bottom, right]);
    }
  };
};
exports.getMapViewController = getMapViewController;
//# sourceMappingURL=mapViewController.js.map