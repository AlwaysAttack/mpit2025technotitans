"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigation = exports.NavigationProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useNavigationController = require("./useNavigationController");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const NavigationContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const NavigationProvider = ({
  termsAndConditionsDialogOptions,
  taskRemovedBehavior,
  children
}) => {
  const {
    navigationController,
    addListeners,
    removeListeners
  } = (0, _useNavigationController.useNavigationController)(termsAndConditionsDialogOptions, taskRemovedBehavior);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(NavigationContext.Provider, {
    value: {
      navigationController,
      addListeners,
      removeListeners
    },
    children: children
  });
};
exports.NavigationProvider = NavigationProvider;
const useNavigation = () => {
  const context = (0, _react.useContext)(NavigationContext);
  if (!context) {
    throw new Error('useNavigation must be used within a NavigationProvider');
  }
  const {
    navigationController,
    addListeners,
    removeListeners
  } = context;

  // Memoize the return value to ensure stable references
  return {
    navigationController,
    addListeners,
    removeListeners
  };
};
exports.useNavigation = useNavigation;
//# sourceMappingURL=NavigationProvider.js.map