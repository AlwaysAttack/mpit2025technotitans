"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NavigationView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _shared = require("../../shared");
var _navigationViewController = require("./navigationViewController");
var _maps = require("../../maps");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const NavigationView = props => {
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const mapViewRef = (0, _react.useRef)(null);
  const [viewId, setViewId] = (0, _react.useState)(null);
  const {
    onMapViewControllerCreated,
    androidStylingOptions,
    iOSStylingOptions,
    onNavigationViewControllerCreated
  } = props;

  /**
   * @param ref - The reference to the NavViewManager component.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const onRefAssign = ref => {
    if (mapViewRef.current !== ref) {
      mapViewRef.current = ref;
    }
  };
  (0, _react.useEffect)(() => {
    if (!mapViewRef.current) {
      return;
    }
    const _viewId = (0, _reactNative.findNodeHandle)(mapViewRef.current) || 0;
    if (viewId !== _viewId) {
      setViewId(_viewId);
      onNavigationViewControllerCreated((0, _navigationViewController.getNavigationViewController)(_viewId));
      onMapViewControllerCreated((0, _maps.getMapViewController)(_viewId));
    }
  }, [androidStylingOptions, iOSStylingOptions, onMapViewControllerCreated, onNavigationViewControllerCreated, viewId]);
  const onMapClick = (0, _react.useCallback)(({
    nativeEvent: latlng
  }) => {
    props.mapViewCallbacks?.onMapClick?.(latlng);
  }, [props.mapViewCallbacks]);
  const onMapReady = (0, _react.useCallback)(() => {
    props.mapViewCallbacks?.onMapReady?.();
  }, [props.mapViewCallbacks]);
  const onMarkerClick = (0, _react.useCallback)(({
    nativeEvent: marker
  }) => {
    props.mapViewCallbacks?.onMarkerClick?.(marker);
  }, [props.mapViewCallbacks]);
  const onPolylineClick = (0, _react.useCallback)(({
    nativeEvent: polyline
  }) => {
    props.mapViewCallbacks?.onPolylineClick?.(polyline);
  }, [props.mapViewCallbacks]);
  const onPolygonClick = (0, _react.useCallback)(({
    nativeEvent: polygon
  }) => {
    props.mapViewCallbacks?.onPolygonClick?.(polygon);
  }, [props.mapViewCallbacks]);
  const onCircleClick = (0, _react.useCallback)(({
    nativeEvent: circle
  }) => {
    props.mapViewCallbacks?.onCircleClick?.(circle);
  }, [props.mapViewCallbacks]);
  const onGroundOverlayClick = (0, _react.useCallback)(({
    nativeEvent: groundOverlay
  }) => {
    props.mapViewCallbacks?.onGroundOverlayClick?.(groundOverlay);
  }, [props.mapViewCallbacks]);
  const onMarkerInfoWindowTapped = (0, _react.useCallback)(({
    nativeEvent: marker
  }) => {
    props.mapViewCallbacks?.onMarkerInfoWindowTapped?.(marker);
  }, [props.mapViewCallbacks]);
  const onRecenterButtonClick = (0, _react.useCallback)(() => {
    props.navigationViewCallbacks?.onRecenterButtonClick?.();
  }, [props.navigationViewCallbacks]);
  const onPromptVisibilityChanged = (0, _react.useCallback)(({
    nativeEvent: event
  }) => {
    props.navigationViewCallbacks?.onPromptVisibilityChanged?.(event.visible);
  }, [props.navigationViewCallbacks]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_reactNative.View, {
    style: props.style ?? styles.defaultStyle,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_shared.NavViewManager, {
      ref: onRefAssign,
      flex: 1,
      fragmentType: _maps.FragmentType.NAVIGATION,
      stylingOptions: (_reactNative.Platform.OS === 'android' ? androidStylingOptions : iOSStylingOptions) || {},
      onMapClick: onMapClick,
      onMapReady: onMapReady,
      onMarkerClick: onMarkerClick,
      onPolylineClick: onPolylineClick,
      onPolygonClick: onPolygonClick,
      onCircleClick: onCircleClick,
      onGroundOverlayClick: onGroundOverlayClick,
      onMarkerInfoWindowTapped: onMarkerInfoWindowTapped,
      onRecenterButtonClick: onRecenterButtonClick,
      onPromptVisibilityChanged: onPromptVisibilityChanged
    })
  });
};
exports.NavigationView = NavigationView;
const styles = _reactNative.StyleSheet.create({
  defaultStyle: {
    flex: 1
  }
});
var _default = exports.default = NavigationView;
//# sourceMappingURL=navigationView.js.map