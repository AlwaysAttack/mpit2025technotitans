import { Text } from '@/components/ui/text';
import { Stack, useRouter } from 'expo-router';
import { View, Dimensions, TextInput, Modal, TouchableOpacity, FlatList, Alert, Animated } from 'react-native';
import { Button } from '@/components/ui/button';
import { Icon } from '@/components/ui/icon';
import { Menu, Share, Navigation, Car, MapPin, Clock, Dot, SlidersHorizontalIcon, RussianRuble, X, Search } from 'lucide-react-native';
import { useState, useEffect } from 'react';
import * as Location from 'expo-location';
import { useColorScheme } from 'nativewind';
import { PriceModal } from '../components/PriceModal';
import { AppLogo } from '../components/AppLogo';
import { SideMenu } from '../components/SideMenu';
import MapComponent from '../components/MapComponent';
import { useMapNavigation } from '../hooks/useMapNavigation';
import { OrderConfirmDialog } from '../components/OrderConfirmDialog';
import { PassengerPanel } from '../components/PassengerPanel';
import { usePassengerPanel } from '../hooks/usePassengerPanel';
import { useOrderSync } from '../hooks/useOrderSync';
import { useWebSocket } from '../hooks/useWebSocket';
import { Order } from '../types/order';



const { height: SCREEN_HEIGHT, width: SCREEN_WIDTH } = Dimensions.get('window');

type AddressSuggestion = {
  place_id: string;
  display_name: string;
  lat: string;
  lon: string;
};

type TripType = 'ride' | 'intercity' | 'courier';

export default function Account2Screen() {
  const { removeOrder } = useOrderSync();
  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
  const [topPanelOpacity] = useState(new Animated.Value(1));
  const { sendOrder } = useWebSocket();
  const { addOrder: addOrderToGlobal } = useOrderSync();

  const animateTopPanel = (toValue: number) => {
    Animated.timing(topPanelOpacity, {
      toValue,
      duration: 300,
      useNativeDriver: true,
    }).start();
  };

  const {
    mapState,
    mapRef,
    updateUserLocation,
    setDestination,
    setRoute,
    centerMapOnUser,
    fitMapToMarkers,
    clearDestination,
    calculateRoute
  } = useMapNavigation();

  let lastGeocodeTime = 0;
  const GEOCODE_DELAY = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏


  const [locationGranted, setLocationGranted] = useState(false);
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<AddressSuggestion[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [isPriceSheetOpen, setIsPriceSheetOpen] = useState(false);
  const [selectedPrice, setSelectedPrice] = useState('–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ü–µ–Ω—É');
  const [selectedTripType, setSelectedTripType] = useState<TripType>('ride');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isOrderConfirmOpen, setIsOrderConfirmOpen] = useState(false);
  const { colorScheme } = useColorScheme();

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –ø–∞–Ω–µ–ª–∏ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
  const { state: panelState, send: sendPanel, context, updateContext, updatePrice } = usePassengerPanel({
    destination: mapState.destination,
    routeInfo: mapState.routeInfo,
  });

  const BOTTOM_PANEL_HEIGHT = 280;
  const TOP_PANEL_HEIGHT = 100;
  
  const mapPadding = {
    top: TOP_PANEL_HEIGHT,
    bottom: panelState === 'searching_driver' ? 0 : BOTTOM_PANEL_HEIGHT,
    left: 0,
    right: 0
  };

  const SCREEN_OPTIONS = {
    headerTitle: () => <AppLogo />,
    headerTransparent: true,
    headerLeft: () => (
      <Button size="icon" variant="ghost" onPress={() => setIsMenuOpen(true)}>
        <Icon as={Menu} className="size-5" />
      </Button>
    ),
    headerRight: () => (
      <Button size="icon" variant="ghost">
        <Icon as={Share} className="size-5" />
      </Button>
    ),
    headerBackVisible: false
  };

  const handlePriceFieldPress = () => {
    setIsPriceSheetOpen(true);
  };
  
  const handlePriceSubmit = (price: number) => {
    console.log('üí∞ Parent received price:', price);
    setSelectedPrice(`${price}‚ÇΩ`);
    setIsPriceSheetOpen(false);
  };

  const handleStartOrder = () => {
    console.log('üîÑ Opening order confirmation dialog');
    setIsOrderConfirmOpen(true);
  };

  const colors = {
    background: colorScheme === 'dark' ? 'bg-gray-900' : 'bg-white',
    card: colorScheme === 'dark' ? 'bg-gray-800' : 'bg-white',
    textPrimary: colorScheme === 'dark' ? 'text-white' : 'text-gray-900',
    textSecondary: colorScheme === 'dark' ? 'text-gray-300' : 'text-gray-600',
    border: colorScheme === 'dark' ? 'border-gray-700' : 'border-gray-200',
    button: colorScheme === 'dark' ? 'bg-gray-700' : 'bg-gray-100',
    buttonActive: colorScheme === 'dark' ? 'bg-gray-600' : 'bg-white',
    primary: 'bg-green-500',
  };

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status === 'granted') {
        setLocationGranted(true);
        getCurrentLocation();
      }
    })();
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ mapState
  useEffect(() => {
    updateContext({
      destination: mapState.destination,
      routeInfo: mapState.routeInfo,
    });
  }, [mapState.destination, mapState.routeInfo, updateContext]);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedPrice
  useEffect(() => {
    if (selectedPrice && selectedPrice !== '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ü–µ–Ω—É') {
      const numericPrice = parseInt(selectedPrice.replace('‚ÇΩ', ''));
      if (!isNaN(numericPrice)) {
        updatePrice(numericPrice);
      }
    }
  }, [selectedPrice, updatePrice]);

  const reverseGeocode = async (latitude: number, longitude: number): Promise<string> => {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Nominatim)
    const now = Date.now();
    if (now - lastGeocodeTime < GEOCODE_DELAY) {
      await new Promise(resolve => setTimeout(resolve, GEOCODE_DELAY - (now - lastGeocodeTime)));
    }
    lastGeocodeTime = Date.now();
  
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&accept-language=ru&addressdetails=1`,
        {
          headers: {
            'User-Agent': 'YourRideApp/1.0',
            'Accept': 'application/json',
          }
        }
      );

      
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }
  
      const text = await response.text();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç HTML
      if (text.trim().startsWith('<!DOCTYPE') || text.trim().startsWith('<html')) {
        console.warn('‚ö†Ô∏è Nominatim returned HTML instead of JSON');
        throw new Error('HTML response received');
      }
  
      const data = JSON.parse(text);
      
      if (data && data.display_name) {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –∞–¥—Ä–µ—Å
        const address = data.display_name.split(',').slice(0, 3).join(', ');
        return address;
      }
      return '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
    } catch (error) {
      console.error('Error reverse geocoding:', error);
      
      // Fallback –∞–¥—Ä–µ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      return `–®: ${latitude.toFixed(4)}, –î: ${longitude.toFixed(4)}`;
    }
  };
  
  

  const getCurrentLocation = async () => {
    try {
      let location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.Balanced,
      });
      const { latitude, longitude } = location.coords;
      
      // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      updateUserLocation(
        { latitude, longitude },
        '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...'
      );
  
      // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      setTimeout(async () => {
        try {
          const address = await reverseGeocode(latitude, longitude);
          updateUserLocation(
            { latitude, longitude },
            address
          );
        } catch (geocodeError) {
          console.log('Geocoding failed, using coordinates:', geocodeError);
          updateUserLocation(
            { latitude, longitude },
            `${latitude.toFixed(4)}, ${longitude.toFixed(4)}`
          );
        }
      }, 0);
  
    } catch (error) {
      console.log('Error getting location:', error);
      updateUserLocation(null, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
    }
  };

  const searchAddresses = async (query: string) => {
    if (!query.trim()) {
      setSearchResults([]);
      return;
    }

    setIsSearching(true);

    try {
    const response = await fetch(
      `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=5&accept-language=ru`,
      {
        headers: {
          'User-Agent': 'YourRideApp/1.0', // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å
          'Accept': 'application/json',
        },
      }
    );

    const text = await response.text();

    if (text.trim().startsWith('<!DOCTYPE') || text.trim().startsWith('<html')) {
      console.warn('‚ö†Ô∏è Nominatim –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON, –≤–æ–∑–º–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤');
      setSearchResults([]);
      return;
    }

    const data: AddressSuggestion[] = JSON.parse(text);
    setSearchResults(data);

  } catch (error) {
    console.error('Error searching addresses:', error);
    setSearchResults([]);
  } finally {
    setIsSearching(false);
  }
};

  const selectAddress = (address: AddressSuggestion) => {
    console.log('üìç Address selected:', address.display_name);
    console.log('üìç User location:', mapState.userLocation);
    console.log('üìç Map ref available:', !!mapRef.current);
    console.log('üìç fitMapToMarkers available:', !!fitMapToMarkers);
  
    const newDestination = {
      latitude: parseFloat(address.lat),
      longitude: parseFloat(address.lon),
    };
  
    setDestination(newDestination, address.display_name.split(',')[0]);
    setIsSearchModalOpen(false);
    setSearchQuery('');
    setSearchResults([]);
  
    if (mapState.userLocation) {
      console.log('üîÑ Calculating route...');
      calculateRoute(mapState.userLocation, newDestination);
      
      // –ê–≤—Ç–æ–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
      setTimeout(() => {
        console.log('üó∫Ô∏è Attempting auto-fit...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ null
        if (mapRef.current && mapState.userLocation) {
          console.log('‚úÖ Using direct fitToCoordinates');
          const coordinates = [
            mapState.userLocation, // –≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ null –∏–∑ —É—Å–ª–æ–≤–∏—è –≤—ã—à–µ
            newDestination
          ];
          mapRef.current.fitToCoordinates(coordinates, {
            edgePadding: { top: 100, right: 50, bottom: 300, left: 50 },
            animated: true,
          });
        } else if (fitMapToMarkers) {
          console.log('‚úÖ Using fitMapToMarkers');
          fitMapToMarkers();
        } else {
          console.log('‚ùå Cannot auto-fit - missing requirements');
        }
      }, 1000);
    } else {
      console.log('‚ùå No user location available');
    }
  };
  
  
  

  const formatDistance = (meters: number): string => {
    if (meters < 1000) {
      return `${Math.round(meters)} –º`;
    } else {
      return `${(meters / 1000).toFixed(1)} –∫–º`;
    }
  };

  const formatDuration = (seconds: number): string => {
    const minutes = Math.round(seconds / 60);
    if (minutes < 60) {
      return `${minutes} –º–∏–Ω`;
    } else {
      const hours = Math.floor(minutes / 60);
      const remainingMinutes = minutes % 60;
      return `${hours} —á ${remainingMinutes} –º–∏–Ω`;
    }
  };

  const openSearchModal = () => {
    setIsSearchModalOpen(true);
  };

  const tripTabs = [
    { id: 'ride' as TripType, label: '–ü–æ–µ–∑–¥–∫–∞' },
    { id: 'intercity' as TripType, label: '–ú–µ–∂–≥–æ—Ä–æ–¥' },
    { id: 'courier' as TripType, label: '–ö—É—Ä—å–µ—Ä' },
  ];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞—Ç—å"
  const handleOrderPress = () => {
    if (!mapState.userLocation || !mapState.destination || !mapState.routeInfo) {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
      return;
    }

    if (selectedPrice === '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ü–µ–Ω—É') {
      Alert.alert('–û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É');
      return;
    }

    setIsOrderConfirmOpen(true);
  };

  const [currentOrder, setCurrentOrder] = useState<Order | null>(null);

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  const handleOrderConfirm = () => {
    setIsOrderConfirmOpen(false);
    animateTopPanel(0);
  
    const order: Order = {
      id: Math.random().toString(36).substr(2, 9),
      passengerId: 'current-user-id',
      startAddress: mapState.currentAddress || '',
      endAddress: mapState.destinationAddress || '',
      startLocation: mapState.userLocation || { latitude: 0, longitude: 0 },
      endLocation: mapState.destination || { latitude: 0, longitude: 0 },
      distance: mapState.routeInfo?.distance || 0,
      duration: mapState.routeInfo?.duration || 0,
      price: parseInt(selectedPrice.replace('‚ÇΩ', '')) || 0,
      status: 'searching',
      createdAt: new Date(),
    };
  
    console.log('üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∑–∞–∫–∞–∑, –¥–∞–Ω–Ω—ã–µ:', order); // <-- –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
  
    addOrderToGlobal(order); // üü¢ "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º" –∑–∞–∫–∞–∑ (–≤ useOrderSync)
    setCurrentOrder(order);
    

    sendPanel({ type: 'CONFIRM_ORDER' });
  };

  // –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
  const handleOrderCancel = () => {
    setIsOrderConfirmOpen(false);
    animateTopPanel(1);
  };

  return (
    <>
      <Stack.Screen options={SCREEN_OPTIONS} />
      <View className={`flex-1 ${colors.background}`}>
        
        <MapComponent
          ref={mapRef}
          data={mapState}
          style={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
          }}
          mapPadding={mapPadding}
          showUserLocation={true}
          onMapReady={() => console.log('Map ready')}
          onRegionChange={(region) => console.log('Region changed:', region)}
        />

        <View className="flex-1 justify-end">
          {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ "–¢–æ—á–∫–∞ –ø–æ–¥–∞—á–∏" */}
          <Animated.View 
            style={{ opacity: topPanelOpacity }}
            className={`mx-4 mb-2 p-4 rounded-2xl shadow-lg ${colors.card}`}
          >
            <View className="flex-row items-center justify-between">
              <View className="flex-1">
                <Text className={`text-sm ${colors.textSecondary}`}>–¢–æ—á–∫–∞ –ø–æ–¥–∞—á–∏</Text>
                <Text className={`text-lg font-semibold ${colors.textPrimary}`}>
                  {mapState.currentAddress || '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞...'}
                </Text>
              </View>
              
              <Button
                size="icon"
                onPress={centerMapOnUser}
                className={`rounded-full shadow-lg ${colorScheme === 'dark' ? 'bg-gray-700' : 'bg-white'}`}
              >
                <Icon as={Navigation} className={`size-5 ${colorScheme === 'dark' ? 'text-white' : 'text-black'}`} />
              </Button>
            </View>
          </Animated.View>

          <PassengerPanel
            mapState={mapState}
            currentOrder={currentOrder}
            selectedPrice={selectedPrice}
            onSearchPress={openSearchModal}
            onPricePress={handlePriceFieldPress}
            onClearDestination={clearDestination}
            onTripTypeChange={setSelectedTripType}
            onPriceSubmit={handlePriceSubmit}
            onStartOrder={handleStartOrder}
            formatDistance={formatDistance}
            formatDuration={formatDuration}
            panelState={panelState}
            sendPanel={sendPanel}
            panelContext={context}
            onCancelOrder={() => {
              if (currentOrder) removeOrder(currentOrder.id);
              setCurrentOrder(null);   
              sendPanel({ type: 'RESET' });      
            }}
          />
        </View>

        <Modal
  visible={isSearchModalOpen}
  animationType="slide"
  presentationStyle="pageSheet"
  onShow={() => console.log('üîç Search modal opened')}
>
  <View className={`flex-1 ${colors.background}`}>
    <View className="flex-row items-center p-4 border-b border-gray-700">
      <Button
        size="icon"
        variant="ghost"
        onPress={() => {
          console.log('‚ùå Closing search modal');
          setIsSearchModalOpen(false);
          setSearchQuery('');
          setSearchResults([]);
        }}
      >
        <Icon as={X} className="size-5" />
      </Button>
      <Text className="text-lg font-semibold ml-4 flex-1">–ö—É–¥–∞ –µ–¥–µ–º?</Text>
    </View>

    <View className="p-4">
      <View className={`flex-row items-center rounded-2xl px-4 py-3 ${colors.button}`}>
        <Icon as={Search} className={`size-5 mr-3 ${colors.textSecondary}`} />
        <TextInput
          value={searchQuery}
          onChangeText={(text) => {
            console.log('üîç Search query:', text);
            setSearchQuery(text);
            searchAddresses(text);
          }}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å..."
          placeholderTextColor={colors.textSecondary}
          className={`flex-1 text-lg ${colors.textPrimary}`}
          autoFocus
        />
      </View>
    </View>

    <FlatList
      data={searchResults}
      keyExtractor={(item) => item.place_id}
      renderItem={({ item }) => (
        <TouchableOpacity
          className={`p-4 border-b ${colors.border}`}
          onPress={() => {
            console.log('üéØ Address item pressed:', item.display_name);
            selectAddress(item);
          }}
        >
          <Text className={`text-lg ${colors.textPrimary}`}>
            {item.display_name.split(',').slice(0, 2).join(', ')}
          </Text>
          <Text className={`text-sm ${colors.textSecondary} mt-1`}>
            {item.display_name.split(',').slice(2).join(', ')}
          </Text>
        </TouchableOpacity>
      )}
      ListEmptyComponent={
        searchQuery && !isSearching ? (
          <Text className={`text-center p-4 ${colors.textSecondary}`}>
            –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
          </Text>
        ) : null
      }
    />
  </View>
</Modal>

        {!locationGranted && (
          <View className="absolute top-20 left-4 right-4 bg-gray-800 p-3 rounded-lg">
            <Text className="text-white text-center">
              –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
            </Text>
          </View>
        )}

<OrderConfirmDialog
  visible={isOrderConfirmOpen}
  onClose={handleOrderCancel}
  onConfirm={handleOrderConfirm}
  startAddress={mapState.currentAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
  endAddress={mapState.destinationAddress || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
  distance={mapState.routeInfo ? formatDistance(mapState.routeInfo.distance) : '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ'}
  duration={mapState.routeInfo ? formatDuration(mapState.routeInfo.duration) : '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ'}
  price={selectedPrice}
  orderData={{
    passengerId: 'current-user-id',
    startLocation: mapState.userLocation || { latitude: 0, longitude: 0 },
    endLocation: mapState.destination || { latitude: 0, longitude: 0 },
    numericPrice: parseInt(selectedPrice.replace('‚ÇΩ', '')) || 0,
  }}
/>

        <PriceModal
          visible={isPriceSheetOpen}
          onClose={() => setIsPriceSheetOpen(false)}
          onPriceSubmit={handlePriceSubmit}
        />

        <SideMenu
          visible={isMenuOpen}
          onClose={() => setIsMenuOpen(false)}
        />
      </View>
    </>
  );
}