import os
import joblib
import pandas as pd

# === –ü—É—Ç–∏ ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_PATH = os.path.join(BASE_DIR, "models", "model_xgb_enhanced.pkl")

class TaxiBidModel:
    def __init__(self, model_path: str = MODEL_PATH):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ–ª–∏.
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å XGBoost –∏–∑ models/model_xgb_enhanced.pkl
        """
        if not os.path.exists(model_path):
            raise FileNotFoundError(
                f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}\n"
                f"–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é train_model.py"
            )
        self.model = joblib.load(model_path)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_path}")

    def predict_proba(self, features: dict) -> float:
        """
        –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏–º–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.

        :param features: —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        :return: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è (float –æ—Ç 0 –¥–æ 1)
        """

        required_fields = [
            "distance_in_meters", "duration_in_seconds", "driver_rating", "platform",
            "price_start_local", "price_bid_local", "pickup_in_meters", "pickup_in_seconds",
            "day_of_week", "time_of_day", "price_diff", "price_ratio", "is_peak_hour",
            "is_weekend", "driver_account_age_days", "pickup_distance_ratio",
            "pickup_time_ratio", "price_per_km"
        ]

        missing = [f for f in required_fields if f not in features]
        if missing:
            raise ValueError(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏: {missing}")

        sample = pd.DataFrame([features])
        probability = self.model.predict_proba(sample)[0, 1]
        return float(probability)

    def predict_label(self, features: dict, threshold: float = 0.5) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ (0/1) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä–æ–≥–∞.
        :param threshold: –ø–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.5)
        """
        proba = self.predict_proba(features)
        return int(proba >= threshold)

# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
if __name__ == "__main__":
    service = TaxiBidModel()

    example = {
        "distance_in_meters": 1500,
        "duration_in_seconds": 420,
        "driver_rating": 4.7,
        "platform": "android",
        "price_start_local": 200,
        "price_bid_local": 280,
        "pickup_in_meters": 600,
        "pickup_in_seconds": 180,
        "day_of_week": 5,
        "time_of_day": "evening",
        "price_diff": 80,
        "price_ratio": 1.4,
        "is_peak_hour": 1,
        "is_weekend": 1,
        "driver_account_age_days": 250,
        "pickup_distance_ratio": 0.4,
        "pickup_time_ratio": 0.43,
        "price_per_km": 187
    }

    proba = service.predict_proba(example)
    label = service.predict_label(example, threshold=0.5)

    print(f"üîÆ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è: {proba:.3f}")
    print(f"üì¶ –†–µ—à–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (1=–ø—Ä–∏–º–µ—Ç, 0=–æ—Ç–∫–∞–∂–µ—Ç): {label}")
