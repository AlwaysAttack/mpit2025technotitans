import os
import joblib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# === –ü—É—Ç–∏ ===
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_PATH = os.path.join(BASE_DIR, "models", "model_xgb_enhanced.pkl")

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ===
if not os.path.exists(MODEL_PATH):
    raise FileNotFoundError(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {MODEL_PATH}")

model = joblib.load(MODEL_PATH)
print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {MODEL_PATH}")

# === 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –∏ –º–æ–¥–µ–ª—å XGB ===
clf = model.named_steps["clf"]
preprocessor = model.named_steps["preprocessor"]

# === 3. –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ OneHotEncoder ===
num_features = preprocessor.transformers_[0][2]
cat_encoder = preprocessor.transformers_[1][1]
cat_features = preprocessor.transformers_[1][2]

encoded_cat_features = list(cat_encoder.get_feature_names_out(cat_features))
all_features = num_features + encoded_cat_features

# === 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
importances = clf.feature_importances_
feature_importance_df = pd.DataFrame({
    "feature": all_features,
    "importance": importances
}).sort_values("importance", ascending=False)

# === 5. –í—ã–≤–æ–¥–∏–º —Ç–æ–ø-15 ===
top_features = feature_importance_df.head(15)
print("\nüèÜ –¢–æ–ø-15 –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
print(top_features)

# === 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ===
plt.figure(figsize=(10, 6))
plt.barh(top_features["feature"][::-1], top_features["importance"][::-1])
plt.title("Feature Importance (XGBoost)")
plt.xlabel("Importance")
plt.ylabel("Feature")
plt.tight_layout()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
plot_path = os.path.join(BASE_DIR, "models", "feature_importance.png")
plt.savefig(plot_path)
plt.show()

print(f"\nüìä –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {plot_path}")
